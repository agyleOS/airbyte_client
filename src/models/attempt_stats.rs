/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  The Configuration API is an internal Airbyte API that is designed for communications between different Airbyte components. * Its main purpose is to enable the Airbyte Engineering team to configure the internal state of [Airbyte Cloud](https://airbyte.com/airbyte-cloud) * It is also sometimes used by OSS users to configure their own Self-Hosted Airbyte deployment (internal state, etc)  WARNING * Airbyte does NOT have active commitments to support this API long-term. * OSS users can utilize the Configuration API, but at their own risk. * This API is utilized internally by the Airbyte Engineering team and may be modified in the future if the need arises. * Modifications by the Airbyte Engineering team could create breaking changes and OSS users would need to update their code to catch up to any backwards incompatible changes in the API.  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/api/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/api/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AttemptStats {
    #[serde(rename = "recordsEmitted", skip_serializing_if = "Option::is_none")]
    pub records_emitted: Option<i64>,
    #[serde(rename = "bytesEmitted", skip_serializing_if = "Option::is_none")]
    pub bytes_emitted: Option<i64>,
    #[serde(
        rename = "stateMessagesEmitted",
        skip_serializing_if = "Option::is_none"
    )]
    pub state_messages_emitted: Option<i64>,
    #[serde(rename = "bytesCommitted", skip_serializing_if = "Option::is_none")]
    pub bytes_committed: Option<i64>,
    #[serde(rename = "recordsCommitted", skip_serializing_if = "Option::is_none")]
    pub records_committed: Option<i64>,
    #[serde(rename = "estimatedRecords", skip_serializing_if = "Option::is_none")]
    pub estimated_records: Option<i64>,
    #[serde(rename = "estimatedBytes", skip_serializing_if = "Option::is_none")]
    pub estimated_bytes: Option<i64>,
}

impl AttemptStats {
    pub fn new() -> AttemptStats {
        AttemptStats {
            records_emitted: None,
            bytes_emitted: None,
            state_messages_emitted: None,
            bytes_committed: None,
            records_committed: None,
            estimated_records: None,
            estimated_bytes: None,
        }
    }
}
