/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WorkspaceCreate {
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(
        rename = "anonymousDataCollection",
        skip_serializing_if = "Option::is_none"
    )]
    pub anonymous_data_collection: Option<bool>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "news", skip_serializing_if = "Option::is_none")]
    pub news: Option<bool>,
    #[serde(rename = "securityUpdates", skip_serializing_if = "Option::is_none")]
    pub security_updates: Option<bool>,
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<Vec<crate::models::Notification>>,
    #[serde(rename = "displaySetupWizard", skip_serializing_if = "Option::is_none")]
    pub display_setup_wizard: Option<bool>,
    #[serde(rename = "defaultGeography", skip_serializing_if = "Option::is_none")]
    pub default_geography: Option<crate::models::Geography>,
    #[serde(rename = "webhookConfigs", skip_serializing_if = "Option::is_none")]
    pub webhook_configs: Option<Vec<crate::models::WebhookConfigWrite>>,
}

impl WorkspaceCreate {
    pub fn new(name: String) -> WorkspaceCreate {
        WorkspaceCreate {
            email: None,
            anonymous_data_collection: None,
            name,
            news: None,
            security_updates: None,
            notifications: None,
            display_setup_wizard: None,
            default_geography: None,
            webhook_configs: None,
        }
    }
}
