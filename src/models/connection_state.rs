/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

/// ConnectionState : Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType=not_set, then none of the fields will be set.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectionState {
    #[serde(rename = "stateType")]
    pub state_type: crate::models::ConnectionStateType,
    #[serde(rename = "connectionId")]
    pub connection_id: uuid::Uuid,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<serde_json::Value>,
    #[serde(rename = "streamState", skip_serializing_if = "Option::is_none")]
    pub stream_state: Option<Vec<crate::models::StreamState>>,
    #[serde(rename = "globalState", skip_serializing_if = "Option::is_none")]
    pub global_state: Option<Box<crate::models::GlobalState>>,
}

impl ConnectionState {
    /// Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType=not_set, then none of the fields will be set.
    pub fn new(
        state_type: crate::models::ConnectionStateType,
        connection_id: uuid::Uuid,
    ) -> ConnectionState {
        ConnectionState {
            state_type,
            connection_id,
            state: None,
            stream_state: None,
            global_state: None,
        }
    }
}
