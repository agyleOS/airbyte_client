/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbMigrationRead {
    #[serde(rename = "migrationType")]
    pub migration_type: String,
    #[serde(rename = "migrationVersion")]
    pub migration_version: String,
    #[serde(rename = "migrationDescription")]
    pub migration_description: String,
    #[serde(rename = "migrationState", skip_serializing_if = "Option::is_none")]
    pub migration_state: Option<crate::models::DbMigrationState>,
    #[serde(rename = "migratedBy", skip_serializing_if = "Option::is_none")]
    pub migrated_by: Option<String>,
    #[serde(rename = "migratedAt", skip_serializing_if = "Option::is_none")]
    pub migrated_at: Option<i64>,
    #[serde(rename = "migrationScript", skip_serializing_if = "Option::is_none")]
    pub migration_script: Option<String>,
}

impl DbMigrationRead {
    pub fn new(
        migration_type: String,
        migration_version: String,
        migration_description: String,
    ) -> DbMigrationRead {
        DbMigrationRead {
            migration_type,
            migration_version,
            migration_description,
            migration_state: None,
            migrated_by: None,
            migrated_at: None,
            migration_script: None,
        }
    }
}
