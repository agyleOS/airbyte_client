/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinationRead {
    #[serde(rename = "destinationDefinitionId")]
    pub destination_definition_id: uuid::Uuid,
    #[serde(rename = "destinationId")]
    pub destination_id: uuid::Uuid,
    #[serde(rename = "workspaceId")]
    pub workspace_id: uuid::Uuid,
    /// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
    #[serde(
        rename = "connectionConfiguration",
        deserialize_with = "Option::deserialize"
    )]
    pub connection_configuration: Option<serde_json::Value>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "destinationName")]
    pub destination_name: String,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
}

impl DestinationRead {
    pub fn new(
        destination_definition_id: uuid::Uuid,
        destination_id: uuid::Uuid,
        workspace_id: uuid::Uuid,
        connection_configuration: Option<serde_json::Value>,
        name: String,
        destination_name: String,
    ) -> DestinationRead {
        DestinationRead {
            destination_definition_id,
            destination_id,
            workspace_id,
            connection_configuration,
            name,
            destination_name,
            icon: None,
        }
    }
}
