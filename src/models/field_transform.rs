/*
 * Airbyte Configuration API
 *
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 * Generated by: https://openapi-generator.tech
 */

/// FieldTransform : Describes the difference between two Streams.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FieldTransform {
    #[serde(rename = "transformType")]
    pub transform_type: TransformType,
    /// A field name is a list of strings that form the path to the field.
    #[serde(rename = "fieldName")]
    pub field_name: Vec<String>,
    #[serde(rename = "breaking")]
    pub breaking: bool,
    #[serde(rename = "addField", skip_serializing_if = "Option::is_none")]
    pub add_field: Option<Box<crate::models::FieldAdd>>,
    #[serde(rename = "removeField", skip_serializing_if = "Option::is_none")]
    pub remove_field: Option<Box<crate::models::FieldRemove>>,
    #[serde(rename = "updateFieldSchema", skip_serializing_if = "Option::is_none")]
    pub update_field_schema: Option<Box<crate::models::FieldSchemaUpdate>>,
}

impl FieldTransform {
    /// Describes the difference between two Streams.
    pub fn new(
        transform_type: TransformType,
        field_name: Vec<String>,
        breaking: bool,
    ) -> FieldTransform {
        FieldTransform {
            transform_type,
            field_name,
            breaking,
            add_field: None,
            remove_field: None,
            update_field_schema: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransformType {
    #[serde(rename = "add_field")]
    AddField,
    #[serde(rename = "remove_field")]
    RemoveField,
    #[serde(rename = "update_field_schema")]
    UpdateFieldSchema,
}

impl Default for TransformType {
    fn default() -> TransformType {
        Self::AddField
    }
}
